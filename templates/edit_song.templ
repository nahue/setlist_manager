package templates

import (
	"fmt"
	"github.com/nahue/setlist_manager/internal/app/shared/types"
	"github.com/nahue/setlist_manager/internal/store"
)

templ EditSongPage(song *store.Song, band *types.Band, user *types.User) {
	@BaseLayout(PageData{
		Title: "Editar " + song.Title + " - " + band.Name,
		Description: "Editar información de la canción",
		Content: EditSongContent(song, band),
		User: user,
	})
}

templ EditSongContent(song *store.Song, band *types.Band) {
	<div class="max-w-2xl mx-auto">
		<!-- Header -->
		<div class="mb-8">
			<div class="flex justify-between items-start">
				<div>
					<div class="flex items-center space-x-3">
						<a href={ "/song?id=" + song.ID } class="text-indigo-600 hover:text-indigo-500">
							<svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
							</svg>
						</a>
						<h1 class="text-3xl font-bold text-gray-900">Editar Canción</h1>
					</div>
					<p class="mt-2 text-lg text-gray-600">{ song.Title }</p>
					<p class="mt-1 text-sm text-gray-500">Banda: { band.Name }</p>
				</div>
			</div>
		</div>

		<!-- Edit Form -->
		<form method="POST" action={ "/api/bands/songs/" + song.ID }>
			<div class="space-y-12">
				<div class="border-b border-gray-900/10 pb-12">
					<h2 class="text-base/7 font-semibold text-gray-900">Información de la Canción</h2>
					<p class="mt-1 text-sm/6 text-gray-600">Actualiza los detalles de la canción.</p>

					<div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
						<div class="col-span-full">
							<label for="title" class="block text-sm/6 font-medium text-gray-900">Título *</label>
							<div class="mt-2">
								<input type="text" name="title" id="title" value={ song.Title } required
									class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6">
							</div>
						</div>

						<div class="col-span-full">
							<label for="artist" class="block text-sm/6 font-medium text-gray-900">Artista</label>
							<div class="mt-2">
								<input type="text" name="artist" id="artist" value={ song.Artist }
									class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
									placeholder="Nombre del artista o banda">
							</div>
						</div>

						<div class="sm:col-span-3">
							<label for="key" class="block text-sm/6 font-medium text-gray-900">Tonalidad</label>
							<div class="mt-2">
								<input type="text" name="key" id="key" value={ song.Key }
									class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
									placeholder="ej: C, Am, F#m">
							</div>
						</div>

						<div class="sm:col-span-3">
							<label for="tempo" class="block text-sm/6 font-medium text-gray-900">Tempo (BPM)</label>
							<div class="mt-2">
								if song.Tempo != nil {
									<input type="number" name="tempo" id="tempo" 
										value={ fmt.Sprintf("%d", *song.Tempo) }
										class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
										placeholder="120" min="1" max="300">
								} else {
									<input type="number" name="tempo" id="tempo" 
										class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
										placeholder="120" min="1" max="300">
								}
							</div>
						</div>

						<div class="col-span-full">
							<label for="notes" class="block text-sm/6 font-medium text-gray-900">Notas</label>
							<div class="mt-2">
								<textarea name="notes" id="notes" rows="4"
									class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
									placeholder="Notas adicionales sobre la canción...">{ song.Notes }</textarea>
							</div>
							<p class="mt-3 text-sm/6 text-gray-600">Información adicional sobre la canción, acordes, letra, etc.</p>
						</div>

						<div class="col-span-full">
							<label for="content" class="block text-sm/6 font-medium text-gray-900">Contenido de la Canción</label>
							<div class="mt-2">
								<div class="mt-1">
									<div class="flex space-x-1 border-b border-gray-300">
										<button type="button" class="tab-button border-b-2 border-indigo-500 text-indigo-600 px-3 py-2 text-sm font-medium" data-tab="edit">
											Editar
										</button>
										<button type="button" class="tab-button border-b-2 border-transparent text-gray-500 hover:text-gray-700 px-3 py-2 text-sm font-medium" data-tab="preview">
											Vista Previa
										</button>
									</div>
									
									<div class="tab-content active" data-tab="edit">
										<textarea name="content" id="content" rows="12"
											class="markdown-editor block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
											placeholder="Escribe aquí el contenido de la canción usando Markdown...&#10;&#10;Ejemplos:&#10;# Título&#10;## Sección&#10;**Negrita** o *cursiva*&#10;- Lista&#10;1. Lista numerada">{ song.Content }</textarea>
									</div>
									
									<div class="tab-content hidden" data-tab="preview">
										<div class="markdown-preview block w-full rounded-md bg-gray-50 px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 sm:text-sm/6 min-h-[200px]">
											<div class="text-gray-500 italic">Vista previa aparecerá aquí...</div>
										</div>
									</div>
								</div>
							</div>
							<p class="mt-3 text-sm/6 text-gray-600">Letras, acordes, notas y cualquier información relevante para la práctica. Soporta Markdown para formato.</p>
						</div>
					</div>
				</div>
			</div>

			<div class="mt-6 flex items-center justify-end gap-x-6">
				<a href={ "/song?id=" + song.ID } 
					class="text-sm/6 font-semibold text-gray-900">Cancelar</a>
				<button type="submit" 
					class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
					Guardar Cambios
				</button>
			</div>
		</form>
	</div>

	<script>
		// Tab functionality
		document.addEventListener('DOMContentLoaded', function() {
			// Initialize tabs
			initializeTabs();
			
			// Initialize markdown preview
			initializeMarkdownPreview();
		});

		function initializeTabs() {
			document.querySelectorAll('.tab-button').forEach(button => {
				button.addEventListener('click', function() {
					const tabName = this.getAttribute('data-tab');
					const tabContainer = this.closest('.mt-1');
					
					// Update button states
					tabContainer.querySelectorAll('.tab-button').forEach(btn => {
						btn.classList.remove('border-indigo-500', 'text-indigo-600');
						btn.classList.add('border-transparent', 'text-gray-500');
					});
					this.classList.remove('border-transparent', 'text-gray-500');
					this.classList.add('border-indigo-500', 'text-indigo-600');
					
					// Update tab content visibility
					tabContainer.querySelectorAll('.tab-content').forEach(content => {
						if (content.getAttribute('data-tab') === tabName) {
							content.classList.remove('hidden');
							content.classList.add('active');
						} else {
							content.classList.add('hidden');
							content.classList.remove('active');
						}
					});
					
					// Update preview if switching to preview tab
					if (tabName === 'preview') {
						updateMarkdownPreview(tabContainer);
					}
				});
			});
		}

		function initializeMarkdownPreview() {
			document.querySelectorAll('.markdown-editor').forEach(textarea => {
				textarea.addEventListener('input', function() {
					const tabContainer = this.closest('.mt-1');
					const previewTab = tabContainer.querySelector('[data-tab="preview"]');
					if (previewTab && !previewTab.classList.contains('hidden')) {
						updateMarkdownPreview(tabContainer);
					}
				});
			});
		}

		function updateMarkdownPreview(tabContainer) {
			const textarea = tabContainer.querySelector('.markdown-editor');
			const preview = tabContainer.querySelector('.markdown-preview');
			
			if (textarea && preview) {
				const markdownText = textarea.value;
				if (markdownText.trim() === '') {
					preview.innerHTML = '<div class="text-gray-500 italic">Vista previa aparecerá aquí...</div>';
				} else {
					// Use marked library for proper markdown parsing
					try {
						// Configure marked options
						marked.setOptions({
							breaks: true, // Convert line breaks to <br>
							gfm: true,    // GitHub Flavored Markdown
							headerIds: false, // Disable header IDs for security
							mangle: false,    // Disable mangling
							sanitize: false   // We'll handle sanitization with DOMPurify if needed
						});
						
						// Parse markdown to HTML
						const html = marked.parse(markdownText);
						
						// Apply custom styling classes
						let styledHtml = html
							// Add Tailwind classes to headers
							.replace(/<h1>/g, '<h1 class="text-2xl font-bold mt-4 mb-3 text-gray-900">')
							.replace(/<h2>/g, '<h2 class="text-xl font-semibold mt-3 mb-2 text-gray-900">')
							.replace(/<h3>/g, '<h3 class="text-lg font-semibold mt-2 mb-1 text-gray-900">')
							// Add Tailwind classes to links
							.replace(/<a /g, '<a class="text-indigo-600 hover:text-indigo-800 underline" target="_blank" ')
							// Add Tailwind classes to lists
							.replace(/<ul>/g, '<ul class="list-disc ml-4 mb-2 text-gray-900">')
							.replace(/<ol>/g, '<ol class="list-decimal ml-4 mb-2 text-gray-900">')
							// Add Tailwind classes to code blocks
							.replace(/<code>/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono text-gray-900">')
							.replace(/<pre>/g, '<pre class="bg-gray-100 p-3 rounded text-sm font-mono overflow-x-auto text-gray-900">')
							// Add Tailwind classes to blockquotes
							.replace(/<blockquote>/g, '<blockquote class="border-l-4 border-gray-300 pl-4 italic text-gray-900">');
						
						preview.innerHTML = styledHtml;
					} catch (error) {
						console.error('Error parsing markdown:', error);
						preview.innerHTML = '<div class="text-red-500">Error parsing markdown</div>';
					}
				}
			}
		}
	</script>
}
