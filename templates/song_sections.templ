package templates

import (
	"fmt"
	"github.com/nahue/setlist_manager/internal/store"
)

templ SongSections(sections []*store.SongSection, songID string) {
	<div id="song-sections" class="mt-8">
		<div class="bg-white shadow rounded-lg">
			<div class="px-6 py-4 border-b border-gray-200">
				<h2 class="text-lg font-medium text-gray-900">Song Sections</h2>
				<p class="text-sm text-gray-500">Organize your song into sections with lyrics, chords, or notes</p>
			</div>
			<div class="p-6">
				if len(sections) == 0 {
					<div class="text-center py-8">
						<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
						</svg>
						<p class="mt-2 text-sm text-gray-500">No sections yet</p>
						<p class="text-xs text-gray-400">Add your first section to get started</p>
					</div>
					
										<!-- AI Generation and Add Section -->
					<div class="pt-6 border-t border-gray-200">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-sm font-medium text-gray-900">Add New Section</h3>
							<form 
								method="POST" 
								action={ "/api/songs/" + songID + "/sections/generate-ai" }
								x-target="song-sections"
								@ajax:success="handleAISuccess($event)"
								@ajax:error="handleAIError($event)"
							>
								<button 
									type="submit"
									class="inline-flex items-center px-3 py-2 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
								>
									<svg class="-ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
									</svg>
									Generate with AI
								</button>
							</form>
						</div>
						
						<!-- Manual Add Section Form -->
						<form
							method="POST"
							action={ "/api/songs/" + songID + "/sections" }
							x-target="song-sections"
							class="space-y-4"
						>
							<div>
								<label class="block text-xs font-medium text-gray-700">Title *</label>
								<input
									type="text"
									name="title"
									required
									class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-xs"
									placeholder="e.g., Verse 1, Chorus, Bridge"
								/>
							</div>
							<div>
								<label class="block text-xs font-medium text-gray-700">Key</label>
								<select
									name="key"
									class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-xs"
								>
									<option value="">No key</option>
									<option value="C">C</option>
									<option value="C#">C#</option>
									<option value="D">D</option>
									<option value="D#">D#</option>
									<option value="E">E</option>
									<option value="F">F</option>
									<option value="F#">F#</option>
									<option value="G">G</option>
									<option value="G#">G#</option>
									<option value="A">A</option>
									<option value="A#">A#</option>
									<option value="B">B</option>
									<option value="Cm">Cm</option>
									<option value="C#m">C#m</option>
									<option value="Dm">Dm</option>
									<option value="D#m">D#m</option>
									<option value="Em">Em</option>
									<option value="Fm">Fm</option>
									<option value="F#m">F#m</option>
									<option value="Gm">Gm</option>
									<option value="G#m">G#m</option>
									<option value="Am">Am</option>
									<option value="A#m">A#m</option>
									<option value="Bm">Bm</option>
								</select>
							</div>
							<div>
								<label class="block text-xs font-medium text-gray-700">Content (Markdown supported)</label>
								<div class="mt-1">
									<!-- Tab Navigation -->
									<div class="border-b border-gray-200">
										<nav class="-mb-px flex space-x-8" aria-label="Tabs">
											<button
												type="button"
												class="border-indigo-500 text-indigo-600 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-xs tab-button active"
												data-tab="edit"
											>
												Edit
											</button>
											<button
												type="button"
												class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-xs tab-button"
												data-tab="preview"
											>
												Preview
											</button>
										</nav>
									</div>
									
									<!-- Tab Content -->
									<div class="mt-2">
										<!-- Edit Tab -->
										<div class="tab-content active" data-tab="edit">
											<textarea
												name="body"
												rows="6"
												class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-xs markdown-editor"
												placeholder="Enter lyrics, chords, notes, or any content for this section...&#10;&#10;Markdown is supported:&#10;# Headers&#10;## Subheaders&#10;**Bold text**&#10;*Italic text*&#10;- Lists&#10;1. Numbered lists&#10;[Links](url)&#10;`code`&#10;> Blockquotes"
											></textarea>
										</div>
										
										<!-- Preview Tab -->
										<div class="tab-content hidden" data-tab="preview">
											<div class="border border-gray-300 rounded-md p-3 bg-gray-50 min-h-[120px] markdown-preview text-xs prose prose-sm max-w-none">
												<div class="text-gray-500 italic">Preview will appear here...</div>
											</div>
										</div>
									</div>
								</div>
							</div>
							<button
								type="submit"
								class="w-full inline-flex justify-center items-center px-3 py-2 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
							>
								Add Section
							</button>
						</form>
					</div>
				} else {
					<div
						class="space-y-4"
						x-sort="handleSort"
						x-sort:config="{ 
							animation: 150,
							ghostClass: 'sortable-ghost',
							chosenClass: 'sortable-chosen'
						}"
					>
						for _, section := range sections {
							<div
								class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors [body:not(.sorting)_&]:hover:bg-gray-50"
								data-section-id={ section.ID }
								x-sort:item={ section.ID }
							>
								<div class="flex justify-between items-start">
									<div class="flex-1">
										<div class="flex items-center space-x-2">
											<span x-sort:handle class="cursor-move text-gray-400 hover:text-gray-600">
												<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
												</svg>
											</span>
											<h3 class="text-lg font-medium text-gray-900">{ section.Title }</h3>
											if section.Key != "" {
												<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
													{ section.Key }
												</span>
											}
										</div>
										if section.Body != "" {
											<div class="mt-2 text-sm text-gray-600 prose prose-sm max-w-none markdown-content" data-content={ section.Body }>
												<!-- Markdown content will be rendered by JavaScript -->
											</div>
										}
										<div class="mt-2 flex items-center space-x-4 text-xs text-gray-500">
											<span>Position: { fmt.Sprintf("%d", section.Position) }</span>
											if section.User != nil {
												<span>Added by { section.User.Email }</span>
											}
										</div>
									</div>
									<div class="flex space-x-2">
										<button onclick="editSection('{ section.ID }')" class="text-indigo-600 hover:text-indigo-500 text-sm font-medium">
											Edit
										</button>
										<form method="delete" action={ "/api/songs/" + songID + "/sections/" + section.ID } x-target="song-sections" @ajax:before="confirm('Are you sure you want to delete this section?') || $event.preventDefault()">
											<button type="submit" class="text-red-600 hover:text-red-500 text-sm font-medium">
												Delete
											</button>
										</form>
									</div>
								</div>
							</div>
						}
					</div>
					
					<!-- Add Section Form -->
					<div class="mt-6 pt-6 border-t border-gray-200">
						<h3 class="text-sm font-medium text-gray-900 mb-4">Add New Section</h3>
						<form
							method="POST"
							action={ "/api/songs/" + songID + "/sections" }
							x-target="song-sections"
						>
							<div class="space-y-4">
								<div>
									<label class="block text-sm/6 font-medium text-gray-900">Title *</label>
									<div class="mt-2">
										<input
											type="text"
											name="title"
											required
											class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
											placeholder="e.g., Verse 1, Chorus, Bridge"
										/>
									</div>
								</div>
								<div>
									<label class="block text-sm/6 font-medium text-gray-900">Key</label>
									<div class="mt-2">
										<select
											name="key"
											class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
										>
											<option value="">No key</option>
											<option value="C">C</option>
											<option value="C#">C#</option>
											<option value="D">D</option>
											<option value="D#">D#</option>
											<option value="E">E</option>
											<option value="F">F</option>
											<option value="F#">F#</option>
											<option value="G">G</option>
											<option value="G#">G#</option>
											<option value="A">A</option>
											<option value="A#">A#</option>
											<option value="B">B</option>
											<option value="Cm">Cm</option>
											<option value="C#m">C#m</option>
											<option value="Dm">Dm</option>
											<option value="D#m">D#m</option>
											<option value="Em">Em</option>
											<option value="Fm">Fm</option>
											<option value="F#m">F#m</option>
											<option value="Gm">Gm</option>
											<option value="G#m">G#m</option>
											<option value="Am">Am</option>
											<option value="A#m">A#m</option>
											<option value="Bm">Bm</option>
										</select>
									</div>
								</div>
								<div>
									<label class="block text-sm/6 font-medium text-gray-900">Content</label>
									<div class="mt-2">
										<textarea
											name="body"
											rows="4"
											class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
											placeholder="Enter lyrics, chords, notes, or any content for this section..."
										></textarea>
									</div>
									<p class="mt-3 text-sm/6 text-gray-600">Markdown is supported for formatting.</p>
								</div>
							</div>
							<div class="mt-6 flex items-center justify-end gap-x-6">
								<button
									type="submit"
									class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
								>
									Add Section
								</button>
							</div>
						</form>
					</div>
				}
			</div>
		</div>
	</div>

	<script>
		// Tab functionality
		document.addEventListener('DOMContentLoaded', function() {
			// Initialize tabs
			initializeTabs();
			
			// Initialize markdown preview
			initializeMarkdownPreview();
			
					// Initialize markdown content in section cards
		initializeMarkdownContent();
	});



	function handleAISuccess(event) {
		// Wait a bit for the DOM to update, then reinitialize the components
		setTimeout(() => {
			console.log('Reinitializing components after AI generation...');
			
			// First initialize tabs and markdown preview
			initializeTabs();
			initializeMarkdownPreview();
			
			// Then initialize markdown content with a small delay to ensure DOM is ready
			setTimeout(() => {
				initializeMarkdownContent();
				console.log('Markdown content initialized');
			}, 50);
			
			console.log('Components reinitialized');
		}, 100);
		
		// Show success notification
		showNotification('Song sections generated successfully!', 'success');
	}

	function handleAIError(event) {
		console.error('Error generating sections:', event.detail);
		showNotification('Failed to generate sections. Please try again.', 'error');
	}

	function showNotification(message, type) {
		// Create notification element
		const notification = document.createElement('div');
		notification.className = `fixed top-4 right-4 z-50 p-4 rounded-md shadow-lg ${
			type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
		}`;
		notification.textContent = message;
		
		// Add to page
		document.body.appendChild(notification);
		
		// Remove after 3 seconds
		setTimeout(() => {
			notification.remove();
		}, 3000);
	}

		function initializeTabs() {
			document.querySelectorAll('.tab-button').forEach(button => {
				button.addEventListener('click', function() {
					const tabName = this.getAttribute('data-tab');
					const tabContainer = this.closest('.mt-1');
					
					// Update button states
					tabContainer.querySelectorAll('.tab-button').forEach(btn => {
						btn.classList.remove('border-indigo-500', 'text-indigo-600');
						btn.classList.add('border-transparent', 'text-gray-500');
					});
					this.classList.remove('border-transparent', 'text-gray-500');
					this.classList.add('border-indigo-500', 'text-indigo-600');
					
					// Update tab content visibility
					tabContainer.querySelectorAll('.tab-content').forEach(content => {
						if (content.getAttribute('data-tab') === tabName) {
							content.classList.remove('hidden');
							content.classList.add('active');
						} else {
							content.classList.add('hidden');
							content.classList.remove('active');
						}
					});
					
					// Update preview if switching to preview tab
					if (tabName === 'preview') {
						updateMarkdownPreview(tabContainer);
					}
				});
			});
		}

		function initializeMarkdownPreview() {
			document.querySelectorAll('.markdown-editor').forEach(textarea => {
				textarea.addEventListener('input', function() {
					const tabContainer = this.closest('.mt-1');
					const previewTab = tabContainer.querySelector('[data-tab="preview"]');
					if (previewTab && !previewTab.classList.contains('hidden')) {
						updateMarkdownPreview(tabContainer);
					}
				});
			});
		}

		function initializeMarkdownContent() {
			document.querySelectorAll('.markdown-content').forEach(element => {
				const markdownText = element.getAttribute('data-content');
				if (markdownText && markdownText.trim() !== '') {
					try {
						// Configure marked options
						marked.setOptions({
							breaks: true,
							gfm: true,
							headerIds: false,
							mangle: false,
							sanitize: false
						});
						
						// Parse markdown to HTML
						const html = marked.parse(markdownText);
						
						// Apply custom styling classes
						let styledHtml = html
							// Add Tailwind classes to headers
							.replace(/<h1>/g, '<h1 class="text-lg font-bold mt-2 mb-1">')
							.replace(/<h2>/g, '<h2 class="text-base font-semibold mt-2 mb-1">')
							.replace(/<h3>/g, '<h3 class="text-sm font-semibold mt-1 mb-1">')
							// Add Tailwind classes to links
							.replace(/<a /g, '<a class="text-indigo-600 hover:text-indigo-800 underline" target="_blank" ')
							// Add Tailwind classes to lists
							.replace(/<ul>/g, '<ul class="list-disc ml-4 mb-1">')
							.replace(/<ol>/g, '<ol class="list-decimal ml-4 mb-1">')
							// Add Tailwind classes to code blocks
							.replace(/<code>/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-xs font-mono">')
							.replace(/<pre>/g, '<pre class="bg-gray-100 p-2 rounded text-xs font-mono overflow-x-auto">')
							// Add Tailwind classes to blockquotes
							.replace(/<blockquote>/g, '<blockquote class="border-l-2 border-gray-300 pl-2 italic text-xs">');
						
						element.innerHTML = styledHtml;
					} catch (error) {
						console.error('Error parsing markdown in section card:', error);
						// Keep original content if parsing fails
					}
				}
			});
		}

		function updateMarkdownPreview(tabContainer) {
			const textarea = tabContainer.querySelector('.markdown-editor');
			const preview = tabContainer.querySelector('.markdown-preview');
			
			if (textarea && preview) {
				const markdownText = textarea.value;
				if (markdownText.trim() === '') {
					preview.innerHTML = '<div class="text-gray-500 italic">Preview will appear here...</div>';
				} else {
					// Use marked library for proper markdown parsing
					try {
						// Configure marked options
						marked.setOptions({
							breaks: true, // Convert line breaks to <br>
							gfm: true,    // GitHub Flavored Markdown
							headerIds: false, // Disable header IDs for security
							mangle: false,    // Disable mangling
							sanitize: false   // We'll handle sanitization with DOMPurify if needed
						});
						
						// Parse markdown to HTML
						const html = marked.parse(markdownText);
						
						// Apply custom styling classes
						let styledHtml = html
							// Add Tailwind classes to headers
							.replace(/<h1>/g, '<h1 class="text-2xl font-bold mt-4 mb-3">')
							.replace(/<h2>/g, '<h2 class="text-xl font-semibold mt-3 mb-2">')
							.replace(/<h3>/g, '<h3 class="text-lg font-semibold mt-2 mb-1">')
							// Add Tailwind classes to links
							.replace(/<a /g, '<a class="text-indigo-600 hover:text-indigo-800 underline" target="_blank" ')
							// Add Tailwind classes to lists
							.replace(/<ul>/g, '<ul class="list-disc ml-4 mb-2">')
							.replace(/<ol>/g, '<ol class="list-decimal ml-4 mb-2">')
							// Add Tailwind classes to code blocks
							.replace(/<code>/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">')
							.replace(/<pre>/g, '<pre class="bg-gray-100 p-3 rounded text-sm font-mono overflow-x-auto">')
							// Add Tailwind classes to blockquotes
							.replace(/<blockquote>/g, '<blockquote class="border-l-4 border-gray-300 pl-4 italic">');
						
						preview.innerHTML = styledHtml;
					} catch (error) {
						console.error('Error parsing markdown:', error);
						preview.innerHTML = '<div class="text-red-500">Error parsing markdown</div>';
					}
				}
			}
		}

		function handleSort(item, position) {
			// Get all section elements and their IDs in current order
			const sectionElements = document.querySelectorAll('[data-section-id]');
			const sectionOrder = Array.from(sectionElements).map(el => el.getAttribute('data-section-id'));
			
			// Send to server
			fetch(`/api/songs/${ songID }/sections/reorder`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ section_order: sectionOrder })
			})
			.then(response => response.text())
			.then(html => {
				document.getElementById('song-sections').innerHTML = html;
				// Reinitialize tabs, markdown preview, and markdown content after content update
				setTimeout(() => {
					initializeTabs();
					initializeMarkdownPreview();
					initializeMarkdownContent();
				}, 100);
			})
			.catch(error => {
				console.error('Error reordering sections:', error);
				alert('Error reordering sections');
			});
		}

		function editSection(sectionId) {
			// TODO: Implement edit functionality
			alert('Edit functionality coming soon!');
		}
	</script>
}

templ SongSectionsError(errorMsg string, songID string) {
	<div id="song-sections" class="mt-8">
		<div class="bg-white shadow rounded-lg">
			<div class="px-6 py-4 border-b border-gray-200">
				<h2 class="text-lg font-medium text-gray-900">Song Sections</h2>
				<p class="text-sm text-gray-500">Organize your song into sections with lyrics, chords, or notes</p>
			</div>
			<div class="p-6">
				<!-- Error Message -->
				<div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
					<div class="flex items-center">
						<svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
						</svg>
						<span class="text-red-700">{ errorMsg }</span>
					</div>
				</div>
				
				<!-- Add Section Form -->
				<div class="pt-6 border-t border-gray-200">
					<h3 class="text-sm font-medium text-gray-900 mb-3">Add New Section</h3>
					<form
						method="POST"
						action={ "/api/songs/" + songID + "/sections" }
						x-target="song-sections"
						class="space-y-3"
					>
						<div>
							<label class="block text-xs font-medium text-gray-700">Title *</label>
							<input
								type="text"
								name="title"
								required
								class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-xs"
								placeholder="e.g., Verse 1, Chorus, Bridge"
							/>
						</div>
						<div>
							<label class="block text-xs font-medium text-gray-700">Key</label>
							<select
								name="key"
								class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-xs"
							>
								<option value="">No key</option>
								<option value="C">C</option>
								<option value="C#">C#</option>
								<option value="D">D</option>
								<option value="D#">D#</option>
								<option value="E">E</option>
								<option value="F">F</option>
								<option value="F#">F#</option>
								<option value="G">G</option>
								<option value="G#">G#</option>
								<option value="A">A</option>
								<option value="A#">A#</option>
								<option value="B">B</option>
								<option value="Cm">Cm</option>
								<option value="C#m">C#m</option>
								<option value="Dm">Dm</option>
								<option value="D#m">D#m</option>
								<option value="Em">Em</option>
								<option value="Fm">Fm</option>
								<option value="F#m">F#m</option>
								<option value="Gm">Gm</option>
								<option value="G#m">G#m</option>
								<option value="Am">Am</option>
								<option value="A#m">A#m</option>
								<option value="Bm">Bm</option>
							</select>
						</div>
						<div>
							<label class="block text-xs font-medium text-gray-700">Content (Markdown supported)</label>
							<div class="mt-1">
								<!-- Tab Navigation -->
								<div class="border-b border-gray-200">
									<nav class="-mb-px flex space-x-8" aria-label="Tabs">
										<button
											type="button"
											class="border-indigo-500 text-indigo-600 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-xs tab-button active"
											data-tab="edit"
										>
											Edit
										</button>
										<button
											type="button"
											class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-xs tab-button"
											data-tab="preview"
										>
											Preview
										</button>
									</nav>
								</div>
								
								<!-- Tab Content -->
								<div class="mt-2">
									<!-- Edit Tab -->
									<div class="tab-content active" data-tab="edit">
										<textarea
											name="body"
											rows="6"
											class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-xs markdown-editor"
											placeholder="Enter lyrics, chords, notes, or any content for this section...&#10;&#10;Markdown is supported:&#10;# Headers&#10;## Subheaders&#10;**Bold text**&#10;*Italic text*&#10;- Lists&#10;1. Numbered lists&#10;[Links](url)&#10;`code`&#10;> Blockquotes"
										></textarea>
									</div>
									
									<!-- Preview Tab -->
									<div class="tab-content hidden" data-tab="preview">
										<div class="border border-gray-300 rounded-md p-3 bg-gray-50 min-h-[120px] markdown-preview text-xs prose prose-sm max-w-none">
											<div class="text-gray-500 italic">Preview will appear here...</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						<button
							type="submit"
							class="w-full inline-flex justify-center items-center px-3 py-2 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
						>
							Add Section
						</button>
					</form>
				</div>
			</div>
		</div>
	</div>
}
