package templates

import (
	"fmt"
	"github.com/nahue/setlist_manager/internal/app/shared/types"
	"github.com/nahue/setlist_manager/internal/store"
)

templ SongDetailsError(message string, songID string) {
	<div class="max-w-4xl mx-auto">
		<div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
			<div class="flex">
				<div class="flex-shrink-0">
					<svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
					</svg>
				</div>
				<div class="ml-3">
					<h3 class="text-sm font-medium text-red-800 dark:text-red-400">Error</h3>
					<div class="mt-2 text-sm text-red-700 dark:text-red-300">
						<p>{ message }</p>
					</div>
					<div class="mt-4">
						<a href={ "/song?id=" + songID } class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800">
							Try Again
						</a>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ SongDetailsPage(song *store.Song, band *types.Band, user *types.User) {
	@BaseLayout(PageData{
		Title: band.Name + " - " + song.Title,
		Description: "Detalles e información de la canción",
		Content: SongDetailsContent(song, band),
		User: user,
	})
}

templ SongDetailsContent(song *store.Song, band *types.Band) {
	<div class="max-w-4xl mx-auto">
		<!-- Header -->
		<div class="mb-8">
			<div class="flex justify-between items-start">
				<div>
					<div class="flex items-center space-x-3">
						<a href={ "/band?id=" + band.ID } class="text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
							<svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
							</svg>
						</a>
						<h1 class="text-3xl font-bold text-gray-900 dark:text-white">{ song.Title }</h1>
					</div>
					if song.Artist != "" {
						<p class="mt-2 text-xl text-gray-600 dark:text-gray-400">by { song.Artist }</p>
					}
					<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Agregada { song.CreatedAt.Format("January 2, 2006") }</p>
				</div>
				<div class="flex space-x-3">
					<a href={ "/band?id=" + band.ID } class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md shadow-sm text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
						Volver a la Banda
					</a>
				</div>
			</div>
		</div>

		<!-- Song Details -->
		<div class="bg-white dark:bg-gray-800 shadow rounded-lg">
			<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
				<h2 class="text-lg font-medium text-gray-900 dark:text-white">Información de la Canción</h2>
			</div>
			<div class="p-6">
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<!-- Basic Information -->
					<div class="space-y-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Título</label>
							<p class="mt-1 text-sm text-gray-900 dark:text-white">{ song.Title }</p>
						</div>
						if song.Artist != "" {
							<div>
								<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Artista</label>
								<p class="mt-1 text-sm text-gray-900 dark:text-white">{ song.Artist }</p>
							</div>
						}
						if song.Key != "" {
							<div>
								<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tonalidad</label>
								<p class="mt-1 text-sm text-gray-900 dark:text-white">{ song.Key }</p>
							</div>
						}
						if song.Tempo != nil {
							<div>
								<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tempo</label>
								<p class="mt-1 text-sm text-gray-900 dark:text-white">{ fmt.Sprint(*song.Tempo) } BPM</p>
							</div>
						}
					</div>

					<!-- Additional Information -->
					<div class="space-y-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Posición en el Setlist</label>
							<p class="mt-1 text-sm text-gray-900 dark:text-white">{ fmt.Sprint(song.Position) }</p>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Agregado por</label>
							if song.User != nil {
								<p class="mt-1 text-sm text-gray-900 dark:text-white">{ song.User.Email }</p>
							} else {
								<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Usuario desconocido</p>
							}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Última Actualización</label>
							<p class="mt-1 text-sm text-gray-900 dark:text-white">{ song.UpdatedAt.Format("January 2, 2006 at 3:04 PM") }</p>
						</div>
					</div>
				</div>

				<!-- Notes Section -->
				if song.Notes != "" {
					<div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Notas</label>
						<div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
							<p class="text-sm text-gray-900 dark:text-white whitespace-pre-wrap">{ song.Notes }</p>
						</div>
					</div>
				}

				<!-- Actions -->
				<div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
					<div class="flex justify-end space-x-3">
						<a href={ "/song/edit?id=" + song.ID } class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
							<svg class="-ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
							</svg>
							Editar Canción
						</a>
						<form method="delete" action={ "/api/bands/songs/" + song.ID } x-target="body" @ajax:before="confirm('¿Estás seguro de que quieres eliminar esta canción?') || $event.preventDefault()">
							<button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800">
								<svg class="-ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
								</svg>
								Eliminar Canción
							</button>
						</form>
					</div>
				</div>
			</div>
		</div>

		<!-- Song Content -->
		@SongContent(song)
	</div>

	<script>
		function handleAISuccess(event) {
			// Show success notification
			showNotification('Contenido generado exitosamente con IA!', 'success');
			
			// The page will be redirected by the server response
		}

		function handleAIError(event) {
			console.error('Error generating content:', event.detail);
			showNotification('Error al generar contenido con IA. Por favor intenta de nuevo.', 'error');
		}

		function showNotification(message, type) {
			// Create notification element
			const notification = document.createElement('div');
			notification.className = `fixed top-4 right-4 z-50 p-4 rounded-md shadow-lg ${
				type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
			}`;
			notification.textContent = message;
			
			// Add to page
			document.body.appendChild(notification);
			
			// Remove after 3 seconds
			setTimeout(() => {
				notification.remove();
			}, 3000);
		}
	</script>
}

templ SongContent(song *store.Song) {
	<div id="song-content" class="mt-8" data-song-id={ song.ID }>
		<div class="bg-white dark:bg-gray-800 shadow rounded-lg dark:shadow-none">
			<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
				<div class="flex justify-between items-center">
					<div>
						<h2 class="text-lg font-medium text-gray-900 dark:text-white">Contenido de la Canción</h2>
						<p class="text-sm text-gray-500 dark:text-gray-400">Letras, acordes, notas y cualquier información relevante para la práctica</p>
					</div>
					if song.Content == "" {
						<form 
							method="POST" 
							action={ "/api/songs/" + song.ID + "/generate-content" }
							x-data="{ isGenerating: false }"
							x-target="song-content"
							@submit="isGenerating = true"
							@ajax:before="isGenerating = true"
							@ajax:after="isGenerating = false"
							@ajax:success="handleAISuccess"
							@ajax:error="handleAIError"
						>
							<button 
								type="submit" 
								:disabled="isGenerating"
								class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
							>
								<svg 
									:class="isGenerating ? 'animate-spin' : ''"
									class="-ml-1 mr-2 h-4 w-4" 
									fill="none" 
									viewBox="0 0 24 24" 
									stroke="currentColor"
								>
									<path 
										v-if="!isGenerating"
										stroke-linecap="round" 
										stroke-linejoin="round" 
										stroke-width="2" 
										d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
									></path>
									<path 
										v-if="isGenerating"
										stroke-linecap="round" 
										stroke-linejoin="round" 
										stroke-width="2" 
										d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
									></path>
								</svg>
								<span x-text="isGenerating ? 'Generando...' : 'Generar con IA'"></span>
							</button>
						</form>
					}
				</div>
			</div>
			<div class="p-6">
				if song.Content == "" {
					<div class="text-center py-8">
						<svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
						</svg>
						<p class="mt-2 text-sm text-gray-500 dark:text-gray-400">No hay contenido aún</p>
						<p class="text-xs text-gray-400 dark:text-gray-500">Usa IA para generar contenido o edita la canción para agregar letras, acordes y notas</p>
					</div>
				} else {
					<div class="prose prose-sm max-w-none dark:prose-invert">
						@templ.Raw(song.Content)
					</div>
				}
			</div>
		</div>
	</div>
}
